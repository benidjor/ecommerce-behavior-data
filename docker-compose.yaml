# version: '3.8'

networks:
  airflow_net:
    driver: bridge

x-airflow-common: &airflow-common
  build:
    context: .
    dockerfile: Dockerfile.airflow
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'true'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    PYTHONPATH: "/opt/airflow:/opt/airflow/dags:/opt/airflow/custom_modules"  # custom_modules 추가
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./config:/opt/airflow/config
    - ./custom_modules:/opt/airflow/custom_modules
    - ./plugins:/opt/airflow/plugins
    - ./data:/opt/airflow/data
    - ./spark:/opt/airflow/spark
    - ./sql:/opt/airflow/sql
  user: '${AIRFLOW_UID:-50000}:0'
  depends_on: &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
  networks:
    - airflow_net

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD', 'pg_isready', '-U', 'airflow']
      interval: 30s
      retries: 5
      start_period: 5s
    restart: no
    networks:
      airflow_net:
        aliases:
          - postgres

  redis:
    image: redis:latest
    expose:
      - 6379
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: no
    networks:
      - airflow_net

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - '8080:8080'
    healthcheck:
      test: ['CMD', 'curl', '--fail', 'http://localhost:8080/health']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: no
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    environment:
      <<: *airflow-common-env
      _PIP_ADDITIONAL_REQUIREMENTS: apache-airflow-providers-apache-spark boto3 pandas
    networks:
      - airflow_net

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ['CMD', 'curl', '--fail', 'http://localhost:8974/health']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: no
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    environment:
      <<: *airflow-common-env
      _PIP_ADDITIONAL_REQUIREMENTS: apache-airflow-providers-apache-spark boto3 pandas
    extra_hosts:
    - "postgres:172.20.0.5"
    networks:
      - airflow_net

  airflow-worker:
    <<: *airflow-common
    command: >
      bash -c "
      exec airflow celery worker
      "
    healthcheck:
      test:
        - 'CMD-SHELL'
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env
      DUMB_INIT_SETSID: '0'
      _PIP_ADDITIONAL_REQUIREMENTS: apache-airflow-providers-apache-spark boto3 pandas
    ports:
      - "4040:4040"   # Spark UI 포트 매핑 추가
    restart: no
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow_net

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"',
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: no
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    environment:
      <<: *airflow-common-env
      _PIP_ADDITIONAL_REQUIREMENTS: apache-airflow-providers-apache-spark boto3 pandas
    networks:
      - airflow_net

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')

        echo "=== Resource Check ==="
        echo "Memory(MB) detected: $${mem_available}"
        echo "CPU cores detected: $${cpus_available}"
        echo "Disk(1K-blocks) detected: $${disk_available}"
        echo

        warning_resources="false"

        if (( mem_available < 4000 )) ; then
          echo -e "\033[1;33mWARNING!!!: Not enough memory.\e[0m (Requires >= 4GB)"
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo -e "\033[1;33mWARNING!!!: Not enough CPU cores.\e[0m (Requires >= 2)"
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo -e "\033[1;33mWARNING!!!: Not enough Disk.\e[0m (Requires >= 10GB)"
          warning_resources="true"
        fi

        if [[ $${warning_resources} == "true" ]]; then
          echo -e "\n\033[1;33mWARNING!!!: Resources might be insufficient for Airflow.\e[0m\n"
        fi

        echo "Creating Airflow directories..."
        mkdir -p /sources/{logs,dags,plugins,data,spark,sql}
        echo "Adjusting permissions..."
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins,data,spark,sql}

        echo "Initializing Airflow DB and creating user..."
        exec /entrypoint airflow db init && \
          airflow version && \
          airflow users create \
            --username admin \
            --firstname admin \
            --lastname admin \
            --role Admin \
            --email admin@example.com \
            --password admin
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: '0:0'
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources
    networks:
      - airflow_net

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: '0'
    command:
      - bash
      - -c
      - airflow
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    networks:
      - airflow_net

  spark-master:
    build:
      context: .
      dockerfile: Dockerfile.spark
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_PORT=7077
      - SPARK_MASTER_WEBUI_PORT=8081
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    ports:
      - '7077:7077' # Spark Master 포트
      - '8081:8081' # Spark Master WebUI 포트
    volumes:
      - ./spark:/opt/spark
      - ./spark/conf:/opt/bitnami/spark/conf
      - ./data:/opt/airflow/data
    user: "1001:1001"
    depends_on:
      - redis
      - postgres
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8081']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: no
    networks:
      - airflow_net

  spark-worker:
    build:
      context: .
      dockerfile: Dockerfile.spark
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_CORES=2
      - SPARK_WORKER_MEMORY=6G
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    volumes:
      - ./spark:/opt/spark
      - ./spark/conf:/opt/bitnami/spark/conf
      - ./data:/opt/airflow/data
    user: "1001:1001"
    depends_on:
      - spark-master
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8081']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: no
    networks:
      - airflow_net

volumes:
  postgres-db-volume:
